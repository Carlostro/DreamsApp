{"version":3,"sources":["server.js"],"names":["express","require","mysql","cors","app","port","origin","json","db","createConnection","host","user","connect","err","error","stack","console","log","get","req","res","table","params","results","query","status","_req$params","id","length","concat","post","name","body","result","_req$params2","affectedRows","put","_req$params3","send","listen"],"mappings":"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","file":"server.min.js","sourcesContent":["const express = require(\"express\");\r\nconst mysql = require(\"mysql2\");\r\nconst app = express();\r\nconst cors = require(\"cors\"); // Importar cors\r\nconst port = 3000;\r\n\r\n\r\n// Configurar CORS\r\napp.use(\r\n  cors({\r\n    //origin: 'http://localhost:8100' // Permitir solicitudes desde el puerto de Ionic\r\n    origin: \"http://192.168.1.41:4200\",\r\n  })\r\n);\r\n\r\napp.use(express.json()); // Permite parsear JSON en las solicitudes\r\n\r\n// Configuración de la base de datos\r\nconst db = mysql.createConnection({\r\n  host: \"localhost\",\r\n  user: \"root\",\r\n  password: \"root\",\r\n  database: \"DreamsApp\",\r\n});\r\n// Conectar a la base de datos\r\ndb.connect((err) => {\r\n  if (err) {\r\n    console.error(\"Error al conectar a la base de datos:\", err.stack);\r\n    return;\r\n  }\r\n  console.log(\"Conectado a la base de datos MySQL.\");\r\n});\r\n\r\n// Ruta para obtener todos los datos de una tabla específica\r\napp.get(\"/api/data/:table\", (req, res) => {\r\n  const { table } = req.params;\r\n  db.query(`SELECT * FROM ??`, [table], (err, results) => {\r\n    if (err) {\r\n      res.status(500).json({ error: \"Error al ejecutar la consulta\" });\r\n      return;\r\n    }\r\n    res.json(results);\r\n  });\r\n});\r\n\r\n// Ruta para obtener un dato específico por ID de una tabla específica\r\napp.get(\"/api/data/:table/:id\", (req, res) => {\r\n  const { table, id } = req.params;\r\n  db.query(`SELECT * FROM ?? WHERE id = ?`, [table, id], (err, results) => {\r\n    if (err) {\r\n      res.status(500).json({ error: \"Error al ejecutar la consulta\" });\r\n      return;\r\n    }\r\n    if (results.length === 0) {\r\n      res.status(404).json({ error: \"Dato no encontrado\" });\r\n      return;\r\n    }\r\n    res.json(results[0]);\r\n  });\r\n});\r\n\r\n// Ruta para obtener datos por nombre de una tabla específica\r\n\r\napp.get(\"/api/data/:table\", (req, res) => {\r\n  const { table } = req.params;\r\n\r\n  // Verificar que el parámetro no esté vacío\r\n  if (!table) {\r\n    res.status(400).json({ error: \"Parámetro inválido\" });\r\n    return;\r\n  }\r\n\r\n  console.log(`Consultando todos los datos de la tabla: ${table}`);\r\n\r\n  // Realizar la consulta a la base de datos\r\n  db.query(`SELECT * FROM ??`, [table], (err, results) => {\r\n    if (err) {\r\n      console.error(\"Error al ejecutar la consulta:\", err);\r\n      res.status(500).json({ error: \"Error al ejecutar la consulta\" });\r\n      return;\r\n    }\r\n    if (results.length === 0) {\r\n      res.status(404).json({ error: \"Datos no encontrados\" });\r\n      return;\r\n    }\r\n    res.json(results);\r\n  });\r\n});\r\n\r\n// Ruta para insertar datos en una tabla específica\r\napp.post(\"/api/data/:table\", (req, res) => {\r\n  const { table } = req.params;\r\n  const { name } = req.body;\r\n  if (!name) {\r\n    return res.status(400).json({ error: \"El campo name es requerido\" });\r\n  }\r\n\r\n  db.query(\r\n    `INSERT INTO ?? (nombre) VALUES (?)`,\r\n    [table, name],\r\n    (err, result) => {\r\n      if (err) {\r\n        res.status(500).json({ error: \"Error al insertar datos\" });\r\n        return;\r\n      }\r\n      res.status(201).json({ id: result.insertId, name });\r\n    }\r\n  );\r\n});\r\n\r\n// Ruta para actualizar datos en una tabla específica\r\napp.put(\"/api/data/:table/:id\", (req, res) => {\r\n  const { table, id } = req.params;\r\n  const { name } = req.body;\r\n  if (!name) {\r\n    return res.status(400).json({ error: \"El campo name es requerido\" });\r\n  }\r\n\r\n  db.query(\r\n    `UPDATE ?? SET nombre = ? WHERE id = ?`,\r\n    [table, name, id],\r\n    (err, result) => {\r\n      if (err) {\r\n        res.status(500).json({ error: \"Error al actualizar datos\" });\r\n        return;\r\n      }\r\n      if (result.affectedRows === 0) {\r\n        res.status(404).json({ error: \"Dato no encontrado\" });\r\n        return;\r\n      }\r\n      res.json({ id, name });\r\n    }\r\n  );\r\n});\r\n\r\n// Ruta para eliminar datos en una tabla específica\r\napp.delete(\"/api/data/:table/:id\", (req, res) => {\r\n  const { table, id } = req.params;\r\n  db.query(`DELETE FROM ?? WHERE id = ?`, [table, id], (err, result) => {\r\n    if (err) {\r\n      res.status(500).json({ error: \"Error al eliminar datos\" });\r\n      return;\r\n    }\r\n    if (result.affectedRows === 0) {\r\n      res.status(404).json({ error: \"Dato no encontrado\" });\r\n      return;\r\n    }\r\n    res.status(204).send();\r\n  });\r\n});\r\n\r\n// Ruta para imprimir contenido\r\n\r\n// Iniciar el servidor\r\napp.listen(port, () => {\r\n  console.log(`Servidor corriendo en http://localhost:${port}`);\r\n});\r\n"]}