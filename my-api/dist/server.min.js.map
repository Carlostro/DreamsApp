{"version":3,"sources":["server.js"],"names":["express","require","mysql","cors","app","use","origin","json","db","createConnection","host","user","connect","err","console","error","stack","log","get","req","res","table","params","query","results","_req$params","id","status","length","name","body","post","result","insertId","put","_req$params2","affectedRows","_req$params3","send","_req$params4","tableName","productName","Ncomplementos","map","row","Object","values","tables","updatedData","message","listen","port"],"mappings":"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","file":"server.min.js","sourcesContent":["const express = require(\"express\");\r\nconst mysql = require(\"mysql2\");\r\nconst app = express();\r\nconst cors = require(\"cors\");\r\nconst port = 3000;\r\n\r\n// Configurar CORS\r\napp.use(\r\n  cors({\r\n     origin: 'http://localhost:8100'\r\n   // origin: \"http://192.168.1.41:4200\",\r\n  })\r\n);\r\n\r\napp.use(express.json()); // Permite parsear JSON en las solicitudes\r\n\r\n// Configuración de la base de datos\r\nconst db = mysql.createConnection({\r\n  host: \"localhost\",\r\n  user: \"root\",\r\n  password: \"root\",\r\n  database: \"DreamsApp\",\r\n});\r\n\r\n// Conectar a la base de datos\r\ndb.connect((err) => {\r\n  if (err) {\r\n    console.error(\"Error al conectar a la base de datos:\", err.stack);\r\n    return;\r\n  }\r\n  console.log(\"Conectado a la base de datos MySQL.\");\r\n});\r\n\r\n// Ruta para obtener todos los datos de una tabla específica\r\napp.get(\"/api/data/:table\", (req, res) => {\r\n  const { table } = req.params;\r\n  db.query(`SELECT * FROM ??`, [table], (err, results) => {\r\n    if (err) {\r\n      res.status(500).json({ error: \"Error al ejecutar la consulta\" });\r\n      return;\r\n    }\r\n    res.json(results);\r\n  });\r\n});\r\n\r\n// Ruta para obtener un dato específico por ID de una tabla específica\r\napp.get(\"/api/data/:table/:id\", (req, res) => {\r\n  const { table, id } = req.params;\r\n  db.query(`SELECT * FROM ?? WHERE id = ?`, [table, id], (err, results) => {\r\n    if (err) {\r\n      res.status(500).json({ error: \"Error al ejecutar la consulta\" });\r\n      return;\r\n    }\r\n    if (results.length === 0) {\r\n      res.status(404).json({ error: \"Dato no encontrado\" });\r\n      return;\r\n    }\r\n    res.json(results[0]);\r\n  });\r\n});\r\n\r\n// Ruta para insertar datos en una tabla específica\r\napp.post(\"/api/data/:table\", (req, res) => {\r\n  const { table } = req.params;\r\n  const { name } = req.body;\r\n  if (!name) {\r\n    return res.status(400).json({ error: \"El campo name es requerido\" });\r\n  }\r\n\r\n  db.query(\r\n    `INSERT INTO ?? (nombre) VALUES (?)`,\r\n    [table, name],\r\n    (err, result) => {\r\n      if (err) {\r\n        res.status(500).json({ error: \"Error al insertar datos\" });\r\n        return;\r\n      }\r\n      res.status(201).json({ id: result.insertId, name });\r\n    }\r\n  );\r\n});\r\n\r\n// Ruta para actualizar datos en una tabla específica\r\napp.put(\"/api/data/:table/:id\", (req, res) => {\r\n  const { table, id } = req.params;\r\n  const { name } = req.body;\r\n  if (!name) {\r\n    return res.status(400).json({ error: \"El campo name es requerido\" });\r\n  }\r\n\r\n  db.query(\r\n    `UPDATE ?? SET nombre = ? WHERE id = ?`,\r\n    [table, name, id],\r\n    (err, result) => {\r\n      if (err) {\r\n        res.status(500).json({ error: \"Error al actualizar datos\" });\r\n        return;\r\n      }\r\n      if (result.affectedRows === 0) {\r\n        res.status(404).json({ error: \"Dato no encontrado\" });\r\n        return;\r\n      }\r\n      res.json({ id, name });\r\n    }\r\n  );\r\n});\r\n\r\n// Ruta para eliminar datos en una tabla específica\r\napp.delete(\"/api/data/:table/:id\", (req, res) => {\r\n  const { table, id } = req.params;\r\n  db.query(`DELETE FROM ?? WHERE id = ?`, [table, id], (err, result) => {\r\n    if (err) {\r\n      res.status(500).json({ error: \"Error al eliminar datos\" });\r\n      return;\r\n    }\r\n    if (result.affectedRows === 0) {\r\n      res.status(404).json({ error: \"Dato no encontrado\" });\r\n      return;\r\n    }\r\n    res.status(204).send();\r\n  });\r\n});\r\n\r\n// Ruta para obtener complementos de una tabla específica\r\napp.get(\"/api/complementos\", (req, res) => {\r\n  const { table } = req.query;\r\n  if (!table) {\r\n    return res.status(400).json({ error: \"El parámetro 'table' es requerido\" });\r\n  }\r\n\r\n  let query = '';\r\n  if (table === 'Cubatas') {\r\n    query = 'SELECT * FROM Complementos_Cubata'; // Ajusta esto según tu esquema de base de datos\r\n  } else if (table === 'Helados Personalizados') {\r\n    query = 'SELECT * FROM Complementos_Helado'; // Ajusta esto según tu esquema de base de datos\r\n  } else if (table === 'Cafes') {\r\n    query = `SELECT Nombre,Precio FROM Complementos_Cafe `;\r\n  }\r\n\r\n  db.query(query, [table], (err, results) => {\r\n    if (err) {\r\n      res.status(500).json({ error: \"Error al ejecutar la consulta\" });\r\n      return;\r\n    }\r\n    res.json(results);\r\n  });\r\n});\r\napp.get(\"/api/productos/:tableName/:productName/ncomplementos\", (req, res) => {\r\n  const { tableName, productName } = req.params;\r\n\r\n  // Consulta SQL para obtener Ncomplementos de la tabla especificada\r\n  const query = `SELECT Ncomplementos FROM ?? WHERE Nombre = ?`;\r\n\r\n  // Ejecutar la consulta\r\n  db.query(query, [tableName, productName], (err, results) => {\r\n      if (err) {\r\n          console.error('Error al ejecutar la consulta:', err);\r\n          res.status(500).json({ error: \"Error al ejecutar la consulta\" });\r\n          return;\r\n      }\r\n      if (results.length === 0) {\r\n          res.status(404).json({ error: \"Producto no encontrado\" });\r\n          return;\r\n      }\r\n      res.json({ Ncomplementos: results[0].Ncomplementos });\r\n  });\r\n});\r\n\r\n\r\n\r\n\r\n\r\n// Página de administrador\r\n\r\n// Ruta para obtener los nombres de las tablas\r\napp.get('/api/tables', (req, res) => {\r\n  db.query('SHOW TABLES', (err, results) => {\r\n    if (err) {\r\n      res.status(500).json({ error: 'Error al obtener las tablas' });\r\n      return;\r\n    }\r\n    const tables = results.map(row => Object.values(row)[0]);\r\n    res.json(tables);\r\n  });\r\n});\r\n\r\n// Ruta para obtener datos de una tabla específica\r\napp.get('/api/tables/:tableName', (req, res) => {\r\n  const tableName = req.params.tableName;\r\n  db.query(`SELECT * FROM ??`, [tableName], (err, results) => {\r\n    if (err) {\r\n      res.status(500).json({ error: 'Error al obtener los datos de la tabla' });\r\n      return;\r\n    }\r\n    res.json(results);\r\n  });\r\n});\r\n\r\n// Ruta para editar datos en una tabla específica\r\napp.put('/api/tables/:tableName/:id', (req, res) => {\r\n  const tableName = req.params.tableName;\r\n  const id = req.params.id;\r\n  const updatedData = req.body;\r\n\r\n  db.query(`UPDATE ?? SET ? WHERE id = ?`, [tableName, updatedData, id], (err, result) => {\r\n    if (err) {\r\n      res.status(500).json({ error: 'Error al actualizar los datos' });\r\n      return;\r\n    }\r\n    res.json({ message: 'Datos actualizados correctamente' });\r\n  });\r\n});\r\n// Iniciar el servidor\r\napp.listen(port, () => {\r\n  console.log(`Servidor corriendo en http://localhost:${port}`);\r\n});\r\n"]}