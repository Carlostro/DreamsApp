{"version":3,"sources":["server.js"],"names":["express","require","mysql","cors","app","use","origin","json","db","createConnection","host","user","connect","err","console","error","stack","log","get","req","res","table","params","query","results","status","_req$params","id","length","post","name","result","insertId","put","_req$params2","body","affectedRows","_req$params3","_req$params4","tableName","productName","Ncomplementos","tables","map","row","Object","values","updatedData","listen","port","concat"],"mappings":"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","file":"server.min.js","sourcesContent":["const express = require(\"express\");\r\nconst mysql = require(\"mysql2\");\r\nconst app = express();\r\nconst cors = require(\"cors\");\r\nconst port = 3000;\r\n\r\n// Habilitar CORS\r\napp.use(\r\n  cors({\r\n     origin: 'http://localhost:8100'\r\n   // origin: \"http://192.168.1.41:4200\",\r\n  })\r\n);\r\n\r\napp.use(express.json()); // Permite parsear JSON en las solicitudes\r\n\r\n// Configuración de la base de datos\r\nconst db = mysql.createConnection({\r\n  host: \"localhost\",\r\n  user: \"root\",\r\n  password: \"root\",\r\n  database: \"DreamsApp\",\r\n});\r\n\r\n// Conectar a la base de datos\r\ndb.connect((err) => {\r\n  if (err) {\r\n    console.error(\"Error al conectar a la base de datos:\", err.stack);\r\n    return;\r\n  }\r\n  console.log(\"Conectado a la base de datos MySQL.\");\r\n});\r\n\r\n// Ruta para obtener todos los datos de una tabla específica\r\napp.get(\"/api/data/:table\", (req, res) => {\r\n  const { table } = req.params;\r\n  db.query(`SELECT * FROM ??`, [table], (err, results) => {\r\n    if (err) {\r\n      res.status(500).json({ error: \"Error al ejecutar la consulta\" });\r\n      return;\r\n    }\r\n    res.json(results);\r\n  });\r\n});\r\n\r\n// Ruta para obtener datos de la tabla promosheladeria donde activate es 1\r\napp.get(\"/api/promosheladeria/active\", (req,res) => {\r\n  db.query(`SELECT * FROM PromosHeladeria WHERE Activo = 1`, (err, results) => {\r\n    if (err) {\r\n      console.error('Error al ejecutar la consulta:', err);\r\n      res.status(500).json({ error: \"Error al ejecutar la consulta\" });\r\n      return;\r\n    }\r\n    res.json(results);\r\n  });\r\n});\r\n\r\n// Ruta para obtener un dato específico por ID de una tabla específica\r\napp.get(\"/api/data/:table/:id\", (req, res) => {\r\n  const { table, id } = req.params;\r\n  db.query(`SELECT * FROM ?? WHERE id = ?`, [table, id], (err, results) => {\r\n    if (err) {\r\n      res.status(500).json({ error: \"Error al ejecutar la consulta\" });\r\n      return;\r\n    }\r\n    if (results.length === 0) {\r\n      res.status(404).json({ error: \"Dato no encontrado\" });\r\n      return;\r\n    }\r\n    res.json(results[0]);\r\n  });\r\n});\r\n\r\n// Ruta para insertar datos en una tabla específica\r\napp.post(\"/api/data/:table\", (req, res) => {\r\n  const { table } = req.params;\r\n  const { name } = req.body;\r\n  if (!name) {\r\n    return res.status(400).json({ error: \"El campo name es requerido\" });\r\n  }\r\n\r\n  db.query(\r\n    `INSERT INTO ?? (nombre) VALUES (?)`,\r\n    [table, name],\r\n    (err, result) => {\r\n      if (err) {\r\n        res.status(500).json({ error: \"Error al insertar datos\" });\r\n        return;\r\n      }\r\n      res.status(201).json({ id: result.insertId, name });\r\n    }\r\n  );\r\n});\r\n\r\n// Ruta para actualizar datos en una tabla específica\r\napp.put(\"/api/data/:table/:id\", (req, res) => {\r\n  const { table, id } = req.params;\r\n  const { name } = req.body;\r\n  if (!name) {\r\n    return res.status(400).json({ error: \"El campo name es requerido\" });\r\n  }\r\n\r\n  db.query(\r\n    `UPDATE ?? SET nombre = ? WHERE id = ?`,\r\n    [table, name, id],\r\n    (err, result) => {\r\n      if (err) {\r\n        res.status(500).json({ error: \"Error al actualizar datos\" });\r\n        return;\r\n      }\r\n      if (result.affectedRows === 0) {\r\n        res.status(404).json({ error: \"Dato no encontrado\" });\r\n        return;\r\n      }\r\n      res.json({ id, name });\r\n    }\r\n  );\r\n});\r\n\r\n// Ruta para eliminar datos en una tabla específica\r\napp.delete(\"/api/data/:table/:id\", (req, res) => {\r\n  const { table, id } = req.params;\r\n  db.query(`DELETE FROM ?? WHERE id = ?`, [table, id], (err, result) => {\r\n    if (err) {\r\n      res.status(500).json({ error: \"Error al eliminar datos\" });\r\n      return;\r\n    }\r\n    if (result.affectedRows === 0) {\r\n      res.status(404).json({ error: \"Dato no encontrado\" });\r\n      return;\r\n    }\r\n    res.status(204).send();\r\n  });\r\n});\r\n\r\n// Ruta para obtener complementos de una tabla específica\r\napp.get(\"/api/complementos\", (req, res) => {\r\n  const { table } = req.query;\r\n  if (!table) {\r\n    return res.status(400).json({ error: \"El parámetro 'table' es requerido\" });\r\n  }\r\n\r\n  let query = '';\r\n  if (table === 'Cubatas') {\r\n    query = 'SELECT * FROM Complementos_Cubata'; // Ajusta esto según tu esquema de base de datos\r\n  } else if (table === 'Helados Personalizados') {\r\n    query = 'SELECT * FROM Complementos_Helado'; // Ajusta esto según tu esquema de base de datos\r\n  } else if (table === 'Cafes') {\r\n    query = `SELECT Nombre,Precio FROM Complementos_Cafe `;\r\n  } else if (table === 'Bolleria') {\r\n    query = `SELECT Nombre,Precio FROM Complementos_Bolleria `;\r\n  } else if (table === 'Ginebras') {\r\n    query = `SELECT * FROM Complementos_Gins `;\r\n  } else if (table === 'Infusiones') {\r\n    query = `SELECT * FROM Complementos_Infusiones `;\r\n  }\r\n  db.query(query, [table], (err, results) => {\r\n    if (err) {\r\n      res.status(500).json({ error: \"Error al ejecutar la consulta\" });\r\n      return;\r\n    }\r\n    res.json(results);\r\n  });\r\n});\r\n\r\napp.get(\"/api/productos/:tableName/:productName/ncomplementos\", (req, res) => {\r\n  const { tableName, productName } = req.params;\r\n\r\n  // Consulta SQL para obtener Ncomplementos de la tabla especificada\r\n  const query = `SELECT Ncomplementos FROM ?? WHERE Nombre = ?`;\r\n\r\n  // Ejecutar la consulta\r\n  db.query(query, [tableName, productName], (err, results) => {\r\n      if (err) {\r\n          console.error('Error al ejecutar la consulta:', err);\r\n          res.status(500).json({ error: \"Error al ejecutar la consulta\" });\r\n          return;\r\n      }\r\n      if (results.length === 0) {\r\n          res.status(404).json({ error: \"Producto no encontrado\" });\r\n          return;\r\n      }\r\n      res.json({ Ncomplementos: results[0].Ncomplementos });\r\n  });\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Página de administrador\r\n\r\n// Ruta para obtener los nombres de las tablas\r\napp.get('/api/tables', (req, res) => {\r\n  db.query('SHOW TABLES', (err, results) => {\r\n    if (err) {\r\n      res.status(500).json({ error: 'Error al obtener las tablas' });\r\n      return;\r\n    }\r\n    const tables = results.map(row => Object.values(row)[0]);\r\n    res.json(tables);\r\n  });\r\n});\r\n\r\n// Ruta para obtener datos de una tabla específica\r\napp.get('/api/tables/:tableName', (req, res) => {\r\n  const tableName = req.params.tableName;\r\n  db.query(`SELECT * FROM ??`, [tableName], (err, results) => {\r\n    if (err) {\r\n      res.status(500).json({ error: 'Error al obtener los datos de la tabla' });\r\n      return;\r\n    }\r\n    res.json(results);\r\n  });\r\n});\r\n\r\n// Ruta para editar datos en una tabla específica\r\napp.put('/api/tables/:tableName/:id', (req, res) => {\r\n  const tableName = req.params.tableName;\r\n  const id = req.params.id;\r\n  const updatedData = req.body;\r\n\r\n  db.query(`UPDATE ?? SET ? WHERE id = ?`, [tableName, updatedData, id], (err, result) => {\r\n    if (err) {\r\n      res.status(500).json({ error: 'Error al actualizar los datos' });\r\n      return;\r\n    }\r\n    res.json({ message: 'Datos actualizados correctamente' });\r\n  });\r\n});\r\n// Iniciar el servidor\r\napp.listen(port, () => {\r\n  console.log(`Servidor corriendo en http://localhost:${port}`);\r\n});\r\n"]}