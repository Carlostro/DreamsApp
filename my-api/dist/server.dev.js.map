{"version":3,"sources":["server.js"],"names":["express","require","mysql","app","cors","port","use","origin","json","db","createConnection","host","user","password","database","connect","err","console","error","stack","log","get","req","res","table","params","query","results","status","id","length","post","name","body","result","insertId","put","affectedRows","send","listen"],"mappings":"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","sourcesContent":["const express = require(\"express\");\r\nconst mysql = require(\"mysql2\");\r\nconst app = express();\r\nconst cors = require(\"cors\"); // Importar cors\r\nconst port = 3000;\r\n\r\n\r\n// Configurar CORS\r\napp.use(\r\n  cors({\r\n    //origin: 'http://localhost:8100' // Permitir solicitudes desde el puerto de Ionic\r\n    origin: \"http://192.168.1.41:4200\",\r\n  })\r\n);\r\n\r\napp.use(express.json()); // Permite parsear JSON en las solicitudes\r\n\r\n// Configuración de la base de datos\r\nconst db = mysql.createConnection({\r\n  host: \"localhost\",\r\n  user: \"root\",\r\n  password: \"root\",\r\n  database: \"DreamsApp\",\r\n});\r\n// Conectar a la base de datos\r\ndb.connect((err) => {\r\n  if (err) {\r\n    console.error(\"Error al conectar a la base de datos:\", err.stack);\r\n    return;\r\n  }\r\n  console.log(\"Conectado a la base de datos MySQL.\");\r\n});\r\n\r\n// Ruta para obtener todos los datos de una tabla específica\r\napp.get(\"/api/data/:table\", (req, res) => {\r\n  const { table } = req.params;\r\n  db.query(`SELECT * FROM ??`, [table], (err, results) => {\r\n    if (err) {\r\n      res.status(500).json({ error: \"Error al ejecutar la consulta\" });\r\n      return;\r\n    }\r\n    res.json(results);\r\n  });\r\n});\r\n\r\n// Ruta para obtener un dato específico por ID de una tabla específica\r\napp.get(\"/api/data/:table/:id\", (req, res) => {\r\n  const { table, id } = req.params;\r\n  db.query(`SELECT * FROM ?? WHERE id = ?`, [table, id], (err, results) => {\r\n    if (err) {\r\n      res.status(500).json({ error: \"Error al ejecutar la consulta\" });\r\n      return;\r\n    }\r\n    if (results.length === 0) {\r\n      res.status(404).json({ error: \"Dato no encontrado\" });\r\n      return;\r\n    }\r\n    res.json(results[0]);\r\n  });\r\n});\r\n\r\n// Ruta para obtener datos por nombre de una tabla específica\r\n\r\napp.get(\"/api/data/:table\", (req, res) => {\r\n  const { table } = req.params;\r\n\r\n  // Verificar que el parámetro no esté vacío\r\n  if (!table) {\r\n    res.status(400).json({ error: \"Parámetro inválido\" });\r\n    return;\r\n  }\r\n\r\n  console.log(`Consultando todos los datos de la tabla: ${table}`);\r\n\r\n  // Realizar la consulta a la base de datos\r\n  db.query(`SELECT * FROM ??`, [table], (err, results) => {\r\n    if (err) {\r\n      console.error(\"Error al ejecutar la consulta:\", err);\r\n      res.status(500).json({ error: \"Error al ejecutar la consulta\" });\r\n      return;\r\n    }\r\n    if (results.length === 0) {\r\n      res.status(404).json({ error: \"Datos no encontrados\" });\r\n      return;\r\n    }\r\n    res.json(results);\r\n  });\r\n});\r\n\r\n// Ruta para insertar datos en una tabla específica\r\napp.post(\"/api/data/:table\", (req, res) => {\r\n  const { table } = req.params;\r\n  const { name } = req.body;\r\n  if (!name) {\r\n    return res.status(400).json({ error: \"El campo name es requerido\" });\r\n  }\r\n\r\n  db.query(\r\n    `INSERT INTO ?? (nombre) VALUES (?)`,\r\n    [table, name],\r\n    (err, result) => {\r\n      if (err) {\r\n        res.status(500).json({ error: \"Error al insertar datos\" });\r\n        return;\r\n      }\r\n      res.status(201).json({ id: result.insertId, name });\r\n    }\r\n  );\r\n});\r\n\r\n// Ruta para actualizar datos en una tabla específica\r\napp.put(\"/api/data/:table/:id\", (req, res) => {\r\n  const { table, id } = req.params;\r\n  const { name } = req.body;\r\n  if (!name) {\r\n    return res.status(400).json({ error: \"El campo name es requerido\" });\r\n  }\r\n\r\n  db.query(\r\n    `UPDATE ?? SET nombre = ? WHERE id = ?`,\r\n    [table, name, id],\r\n    (err, result) => {\r\n      if (err) {\r\n        res.status(500).json({ error: \"Error al actualizar datos\" });\r\n        return;\r\n      }\r\n      if (result.affectedRows === 0) {\r\n        res.status(404).json({ error: \"Dato no encontrado\" });\r\n        return;\r\n      }\r\n      res.json({ id, name });\r\n    }\r\n  );\r\n});\r\n\r\n// Ruta para eliminar datos en una tabla específica\r\napp.delete(\"/api/data/:table/:id\", (req, res) => {\r\n  const { table, id } = req.params;\r\n  db.query(`DELETE FROM ?? WHERE id = ?`, [table, id], (err, result) => {\r\n    if (err) {\r\n      res.status(500).json({ error: \"Error al eliminar datos\" });\r\n      return;\r\n    }\r\n    if (result.affectedRows === 0) {\r\n      res.status(404).json({ error: \"Dato no encontrado\" });\r\n      return;\r\n    }\r\n    res.status(204).send();\r\n  });\r\n});\r\n\r\n// Ruta para imprimir contenido\r\n\r\n// Iniciar el servidor\r\napp.listen(port, () => {\r\n  console.log(`Servidor corriendo en http://localhost:${port}`);\r\n});\r\n"],"file":"server.dev.js"}