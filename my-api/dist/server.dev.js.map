{"version":3,"sources":["server.js"],"names":["express","require","mysql","app","cors","port","use","origin","json","db","createConnection","host","user","password","database","connect","err","console","error","stack","log","get","req","res","table","params","query","results","status","id","length","post","name","body","result","insertId","put","affectedRows","send","tableName","productName","Ncomplementos","tables","map","row","Object","values","updatedData","message","listen"],"mappings":";;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMC,KAAK,GAAGD,OAAO,CAAC,QAAD,CAArB;;AACA,IAAME,GAAG,GAAGH,OAAO,EAAnB;;AACA,IAAMI,IAAI,GAAGH,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMI,IAAI,GAAG,IAAb,C,CAEA;;AACAF,GAAG,CAACG,GAAJ,CACEF,IAAI,CAAC;AACFG,EAAAA,MAAM,EAAE,uBADN,CAEJ;;AAFI,CAAD,CADN;AAOAJ,GAAG,CAACG,GAAJ,CAAQN,OAAO,CAACQ,IAAR,EAAR,E,CAAyB;AAEzB;;AACA,IAAMC,EAAE,GAAGP,KAAK,CAACQ,gBAAN,CAAuB;AAChCC,EAAAA,IAAI,EAAE,WAD0B;AAEhCC,EAAAA,IAAI,EAAE,MAF0B;AAGhCC,EAAAA,QAAQ,EAAE,MAHsB;AAIhCC,EAAAA,QAAQ,EAAE;AAJsB,CAAvB,CAAX,C,CAOA;;AACAL,EAAE,CAACM,OAAH,CAAW,UAACC,GAAD,EAAS;AAClB,MAAIA,GAAJ,EAAS;AACPC,IAAAA,OAAO,CAACC,KAAR,CAAc,uCAAd,EAAuDF,GAAG,CAACG,KAA3D;AACA;AACD;;AACDF,EAAAA,OAAO,CAACG,GAAR,CAAY,qCAAZ;AACD,CAND,E,CAQA;;AACAjB,GAAG,CAACkB,GAAJ,CAAQ,kBAAR,EAA4B,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,MAChCC,KADgC,GACtBF,GAAG,CAACG,MADkB,CAChCD,KADgC;AAExCf,EAAAA,EAAE,CAACiB,KAAH,qBAA6B,CAACF,KAAD,CAA7B,EAAsC,UAACR,GAAD,EAAMW,OAAN,EAAkB;AACtD,QAAIX,GAAJ,EAAS;AACPO,MAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBpB,IAAhB,CAAqB;AAAEU,QAAAA,KAAK,EAAE;AAAT,OAArB;AACA;AACD;;AACDK,IAAAA,GAAG,CAACf,IAAJ,CAASmB,OAAT;AACD,GAND;AAOD,CATD,E,CAWA;;AACAxB,GAAG,CAACkB,GAAJ,CAAQ,6BAAR,EAAuC,UAACC,GAAD,EAAKC,GAAL,EAAa;AAClDd,EAAAA,EAAE,CAACiB,KAAH,mDAA2D,UAACV,GAAD,EAAMW,OAAN,EAAkB;AAC3E,QAAIX,GAAJ,EAAS;AACPC,MAAAA,OAAO,CAACC,KAAR,CAAc,gCAAd,EAAgDF,GAAhD;AACAO,MAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBpB,IAAhB,CAAqB;AAAEU,QAAAA,KAAK,EAAE;AAAT,OAArB;AACA;AACD;;AACDK,IAAAA,GAAG,CAACf,IAAJ,CAASmB,OAAT;AACD,GAPD;AAQD,CATD,E,CAWA;;AACAxB,GAAG,CAACkB,GAAJ,CAAQ,sBAAR,EAAgC,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,oBACtBD,GAAG,CAACG,MADkB;AAAA,MACpCD,KADoC,eACpCA,KADoC;AAAA,MAC7BK,EAD6B,eAC7BA,EAD6B;AAE5CpB,EAAAA,EAAE,CAACiB,KAAH,kCAA0C,CAACF,KAAD,EAAQK,EAAR,CAA1C,EAAuD,UAACb,GAAD,EAAMW,OAAN,EAAkB;AACvE,QAAIX,GAAJ,EAAS;AACPO,MAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBpB,IAAhB,CAAqB;AAAEU,QAAAA,KAAK,EAAE;AAAT,OAArB;AACA;AACD;;AACD,QAAIS,OAAO,CAACG,MAAR,KAAmB,CAAvB,EAA0B;AACxBP,MAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBpB,IAAhB,CAAqB;AAAEU,QAAAA,KAAK,EAAE;AAAT,OAArB;AACA;AACD;;AACDK,IAAAA,GAAG,CAACf,IAAJ,CAASmB,OAAO,CAAC,CAAD,CAAhB;AACD,GAVD;AAWD,CAbD,E,CAeA;;AACAxB,GAAG,CAAC4B,IAAJ,CAAS,kBAAT,EAA6B,UAACT,GAAD,EAAMC,GAAN,EAAc;AAAA,MACjCC,KADiC,GACvBF,GAAG,CAACG,MADmB,CACjCD,KADiC;AAAA,MAEjCQ,IAFiC,GAExBV,GAAG,CAACW,IAFoB,CAEjCD,IAFiC;;AAGzC,MAAI,CAACA,IAAL,EAAW;AACT,WAAOT,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBpB,IAAhB,CAAqB;AAAEU,MAAAA,KAAK,EAAE;AAAT,KAArB,CAAP;AACD;;AAEDT,EAAAA,EAAE,CAACiB,KAAH,uCAEE,CAACF,KAAD,EAAQQ,IAAR,CAFF,EAGE,UAAChB,GAAD,EAAMkB,MAAN,EAAiB;AACf,QAAIlB,GAAJ,EAAS;AACPO,MAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBpB,IAAhB,CAAqB;AAAEU,QAAAA,KAAK,EAAE;AAAT,OAArB;AACA;AACD;;AACDK,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBpB,IAAhB,CAAqB;AAAEqB,MAAAA,EAAE,EAAEK,MAAM,CAACC,QAAb;AAAuBH,MAAAA,IAAI,EAAJA;AAAvB,KAArB;AACD,GATH;AAWD,CAlBD,E,CAoBA;;AACA7B,GAAG,CAACiC,GAAJ,CAAQ,sBAAR,EAAgC,UAACd,GAAD,EAAMC,GAAN,EAAc;AAAA,qBACtBD,GAAG,CAACG,MADkB;AAAA,MACpCD,KADoC,gBACpCA,KADoC;AAAA,MAC7BK,EAD6B,gBAC7BA,EAD6B;AAAA,MAEpCG,IAFoC,GAE3BV,GAAG,CAACW,IAFuB,CAEpCD,IAFoC;;AAG5C,MAAI,CAACA,IAAL,EAAW;AACT,WAAOT,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBpB,IAAhB,CAAqB;AAAEU,MAAAA,KAAK,EAAE;AAAT,KAArB,CAAP;AACD;;AAEDT,EAAAA,EAAE,CAACiB,KAAH,0CAEE,CAACF,KAAD,EAAQQ,IAAR,EAAcH,EAAd,CAFF,EAGE,UAACb,GAAD,EAAMkB,MAAN,EAAiB;AACf,QAAIlB,GAAJ,EAAS;AACPO,MAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBpB,IAAhB,CAAqB;AAAEU,QAAAA,KAAK,EAAE;AAAT,OAArB;AACA;AACD;;AACD,QAAIgB,MAAM,CAACG,YAAP,KAAwB,CAA5B,EAA+B;AAC7Bd,MAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBpB,IAAhB,CAAqB;AAAEU,QAAAA,KAAK,EAAE;AAAT,OAArB;AACA;AACD;;AACDK,IAAAA,GAAG,CAACf,IAAJ,CAAS;AAAEqB,MAAAA,EAAE,EAAFA,EAAF;AAAMG,MAAAA,IAAI,EAAJA;AAAN,KAAT;AACD,GAbH;AAeD,CAtBD,E,CAwBA;;AACA7B,GAAG,UAAH,CAAW,sBAAX,EAAmC,UAACmB,GAAD,EAAMC,GAAN,EAAc;AAAA,qBACzBD,GAAG,CAACG,MADqB;AAAA,MACvCD,KADuC,gBACvCA,KADuC;AAAA,MAChCK,EADgC,gBAChCA,EADgC;AAE/CpB,EAAAA,EAAE,CAACiB,KAAH,gCAAwC,CAACF,KAAD,EAAQK,EAAR,CAAxC,EAAqD,UAACb,GAAD,EAAMkB,MAAN,EAAiB;AACpE,QAAIlB,GAAJ,EAAS;AACPO,MAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBpB,IAAhB,CAAqB;AAAEU,QAAAA,KAAK,EAAE;AAAT,OAArB;AACA;AACD;;AACD,QAAIgB,MAAM,CAACG,YAAP,KAAwB,CAA5B,EAA+B;AAC7Bd,MAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBpB,IAAhB,CAAqB;AAAEU,QAAAA,KAAK,EAAE;AAAT,OAArB;AACA;AACD;;AACDK,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBU,IAAhB;AACD,GAVD;AAWD,CAbD,E,CAeA;;AACAnC,GAAG,CAACkB,GAAJ,CAAQ,mBAAR,EAA6B,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,MACjCC,KADiC,GACvBF,GAAG,CAACI,KADmB,CACjCF,KADiC;;AAEzC,MAAI,CAACA,KAAL,EAAY;AACV,WAAOD,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBpB,IAAhB,CAAqB;AAAEU,MAAAA,KAAK,EAAE;AAAT,KAArB,CAAP;AACD;;AAED,MAAIQ,KAAK,GAAG,EAAZ;;AACA,MAAIF,KAAK,KAAK,SAAd,EAAyB;AACvBE,IAAAA,KAAK,GAAG,mCAAR,CADuB,CACsB;AAC9C,GAFD,MAEO,IAAIF,KAAK,KAAK,wBAAd,EAAwC;AAC7CE,IAAAA,KAAK,GAAG,mCAAR,CAD6C,CACA;AAC9C,GAFM,MAEA,IAAIF,KAAK,KAAK,OAAd,EAAuB;AAC5BE,IAAAA,KAAK,iDAAL;AACD,GAFM,MAEA,IAAIF,KAAK,KAAK,UAAd,EAA0B;AAC/BE,IAAAA,KAAK,qDAAL;AACD,GAFM,MAEA,IAAIF,KAAK,KAAK,UAAd,EAA0B;AAC/BE,IAAAA,KAAK,qCAAL;AACD,GAFM,MAEA,IAAIF,KAAK,KAAK,YAAd,EAA4B;AACjCE,IAAAA,KAAK,2CAAL;AACD;;AACDjB,EAAAA,EAAE,CAACiB,KAAH,CAASA,KAAT,EAAgB,CAACF,KAAD,CAAhB,EAAyB,UAACR,GAAD,EAAMW,OAAN,EAAkB;AACzC,QAAIX,GAAJ,EAAS;AACPO,MAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBpB,IAAhB,CAAqB;AAAEU,QAAAA,KAAK,EAAE;AAAT,OAArB;AACA;AACD;;AACDK,IAAAA,GAAG,CAACf,IAAJ,CAASmB,OAAT;AACD,GAND;AAOD,CA3BD;AA6BAxB,GAAG,CAACkB,GAAJ,CAAQ,sDAAR,EAAgE,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,qBACzCD,GAAG,CAACG,MADqC;AAAA,MACpEc,SADoE,gBACpEA,SADoE;AAAA,MACzDC,WADyD,gBACzDA,WADyD,EAG5E;;AACA,MAAMd,KAAK,kDAAX,CAJ4E,CAM5E;;AACAjB,EAAAA,EAAE,CAACiB,KAAH,CAASA,KAAT,EAAgB,CAACa,SAAD,EAAYC,WAAZ,CAAhB,EAA0C,UAACxB,GAAD,EAAMW,OAAN,EAAkB;AACxD,QAAIX,GAAJ,EAAS;AACLC,MAAAA,OAAO,CAACC,KAAR,CAAc,gCAAd,EAAgDF,GAAhD;AACAO,MAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBpB,IAAhB,CAAqB;AAAEU,QAAAA,KAAK,EAAE;AAAT,OAArB;AACA;AACH;;AACD,QAAIS,OAAO,CAACG,MAAR,KAAmB,CAAvB,EAA0B;AACtBP,MAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBpB,IAAhB,CAAqB;AAAEU,QAAAA,KAAK,EAAE;AAAT,OAArB;AACA;AACH;;AACDK,IAAAA,GAAG,CAACf,IAAJ,CAAS;AAAEiC,MAAAA,aAAa,EAAEd,OAAO,CAAC,CAAD,CAAP,CAAWc;AAA5B,KAAT;AACH,GAXD;AAYD,CAnBD,E,CA0BA;AAEA;;AACAtC,GAAG,CAACkB,GAAJ,CAAQ,aAAR,EAAuB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACnCd,EAAAA,EAAE,CAACiB,KAAH,CAAS,aAAT,EAAwB,UAACV,GAAD,EAAMW,OAAN,EAAkB;AACxC,QAAIX,GAAJ,EAAS;AACPO,MAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBpB,IAAhB,CAAqB;AAAEU,QAAAA,KAAK,EAAE;AAAT,OAArB;AACA;AACD;;AACD,QAAMwB,MAAM,GAAGf,OAAO,CAACgB,GAAR,CAAY,UAAAC,GAAG;AAAA,aAAIC,MAAM,CAACC,MAAP,CAAcF,GAAd,EAAmB,CAAnB,CAAJ;AAAA,KAAf,CAAf;AACArB,IAAAA,GAAG,CAACf,IAAJ,CAASkC,MAAT;AACD,GAPD;AAQD,CATD,E,CAWA;;AACAvC,GAAG,CAACkB,GAAJ,CAAQ,wBAAR,EAAkC,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC9C,MAAMgB,SAAS,GAAGjB,GAAG,CAACG,MAAJ,CAAWc,SAA7B;AACA9B,EAAAA,EAAE,CAACiB,KAAH,qBAA6B,CAACa,SAAD,CAA7B,EAA0C,UAACvB,GAAD,EAAMW,OAAN,EAAkB;AAC1D,QAAIX,GAAJ,EAAS;AACPO,MAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBpB,IAAhB,CAAqB;AAAEU,QAAAA,KAAK,EAAE;AAAT,OAArB;AACA;AACD;;AACDK,IAAAA,GAAG,CAACf,IAAJ,CAASmB,OAAT;AACD,GAND;AAOD,CATD,E,CAWA;;AACAxB,GAAG,CAACiC,GAAJ,CAAQ,4BAAR,EAAsC,UAACd,GAAD,EAAMC,GAAN,EAAc;AAClD,MAAMgB,SAAS,GAAGjB,GAAG,CAACG,MAAJ,CAAWc,SAA7B;AACA,MAAMV,EAAE,GAAGP,GAAG,CAACG,MAAJ,CAAWI,EAAtB;AACA,MAAMkB,WAAW,GAAGzB,GAAG,CAACW,IAAxB;AAEAxB,EAAAA,EAAE,CAACiB,KAAH,iCAAyC,CAACa,SAAD,EAAYQ,WAAZ,EAAyBlB,EAAzB,CAAzC,EAAuE,UAACb,GAAD,EAAMkB,MAAN,EAAiB;AACtF,QAAIlB,GAAJ,EAAS;AACPO,MAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBpB,IAAhB,CAAqB;AAAEU,QAAAA,KAAK,EAAE;AAAT,OAArB;AACA;AACD;;AACDK,IAAAA,GAAG,CAACf,IAAJ,CAAS;AAAEwC,MAAAA,OAAO,EAAE;AAAX,KAAT;AACD,GAND;AAOD,CAZD,E,CAaA;;AACA7C,GAAG,CAAC8C,MAAJ,CAAW5C,IAAX,EAAiB,YAAM;AACrBY,EAAAA,OAAO,CAACG,GAAR,kDAAsDf,IAAtD;AACD,CAFD","sourcesContent":["const express = require(\"express\");\r\nconst mysql = require(\"mysql2\");\r\nconst app = express();\r\nconst cors = require(\"cors\");\r\nconst port = 3000;\r\n\r\n// Habilitar CORS\r\napp.use(\r\n  cors({\r\n     origin: 'http://localhost:8100'\r\n   // origin: \"http://192.168.1.41:4200\",\r\n  })\r\n);\r\n\r\napp.use(express.json()); // Permite parsear JSON en las solicitudes\r\n\r\n// ConfiguraciÃ³n de la base de datos\r\nconst db = mysql.createConnection({\r\n  host: \"localhost\",\r\n  user: \"root\",\r\n  password: \"root\",\r\n  database: \"DreamsApp\",\r\n});\r\n\r\n// Conectar a la base de datos\r\ndb.connect((err) => {\r\n  if (err) {\r\n    console.error(\"Error al conectar a la base de datos:\", err.stack);\r\n    return;\r\n  }\r\n  console.log(\"Conectado a la base de datos MySQL.\");\r\n});\r\n\r\n// Ruta para obtener todos los datos de una tabla especÃ­fica\r\napp.get(\"/api/data/:table\", (req, res) => {\r\n  const { table } = req.params;\r\n  db.query(`SELECT * FROM ??`, [table], (err, results) => {\r\n    if (err) {\r\n      res.status(500).json({ error: \"Error al ejecutar la consulta\" });\r\n      return;\r\n    }\r\n    res.json(results);\r\n  });\r\n});\r\n\r\n// Ruta para obtener datos de la tabla promosheladeria donde activate es 1\r\napp.get(\"/api/promosheladeria/active\", (req,res) => {\r\n  db.query(`SELECT * FROM PromosHeladeria WHERE Activo = 1`, (err, results) => {\r\n    if (err) {\r\n      console.error('Error al ejecutar la consulta:', err);\r\n      res.status(500).json({ error: \"Error al ejecutar la consulta\" });\r\n      return;\r\n    }\r\n    res.json(results);\r\n  });\r\n});\r\n\r\n// Ruta para obtener un dato especÃ­fico por ID de una tabla especÃ­fica\r\napp.get(\"/api/data/:table/:id\", (req, res) => {\r\n  const { table, id } = req.params;\r\n  db.query(`SELECT * FROM ?? WHERE id = ?`, [table, id], (err, results) => {\r\n    if (err) {\r\n      res.status(500).json({ error: \"Error al ejecutar la consulta\" });\r\n      return;\r\n    }\r\n    if (results.length === 0) {\r\n      res.status(404).json({ error: \"Dato no encontrado\" });\r\n      return;\r\n    }\r\n    res.json(results[0]);\r\n  });\r\n});\r\n\r\n// Ruta para insertar datos en una tabla especÃ­fica\r\napp.post(\"/api/data/:table\", (req, res) => {\r\n  const { table } = req.params;\r\n  const { name } = req.body;\r\n  if (!name) {\r\n    return res.status(400).json({ error: \"El campo name es requerido\" });\r\n  }\r\n\r\n  db.query(\r\n    `INSERT INTO ?? (nombre) VALUES (?)`,\r\n    [table, name],\r\n    (err, result) => {\r\n      if (err) {\r\n        res.status(500).json({ error: \"Error al insertar datos\" });\r\n        return;\r\n      }\r\n      res.status(201).json({ id: result.insertId, name });\r\n    }\r\n  );\r\n});\r\n\r\n// Ruta para actualizar datos en una tabla especÃ­fica\r\napp.put(\"/api/data/:table/:id\", (req, res) => {\r\n  const { table, id } = req.params;\r\n  const { name } = req.body;\r\n  if (!name) {\r\n    return res.status(400).json({ error: \"El campo name es requerido\" });\r\n  }\r\n\r\n  db.query(\r\n    `UPDATE ?? SET nombre = ? WHERE id = ?`,\r\n    [table, name, id],\r\n    (err, result) => {\r\n      if (err) {\r\n        res.status(500).json({ error: \"Error al actualizar datos\" });\r\n        return;\r\n      }\r\n      if (result.affectedRows === 0) {\r\n        res.status(404).json({ error: \"Dato no encontrado\" });\r\n        return;\r\n      }\r\n      res.json({ id, name });\r\n    }\r\n  );\r\n});\r\n\r\n// Ruta para eliminar datos en una tabla especÃ­fica\r\napp.delete(\"/api/data/:table/:id\", (req, res) => {\r\n  const { table, id } = req.params;\r\n  db.query(`DELETE FROM ?? WHERE id = ?`, [table, id], (err, result) => {\r\n    if (err) {\r\n      res.status(500).json({ error: \"Error al eliminar datos\" });\r\n      return;\r\n    }\r\n    if (result.affectedRows === 0) {\r\n      res.status(404).json({ error: \"Dato no encontrado\" });\r\n      return;\r\n    }\r\n    res.status(204).send();\r\n  });\r\n});\r\n\r\n// Ruta para obtener complementos de una tabla especÃ­fica\r\napp.get(\"/api/complementos\", (req, res) => {\r\n  const { table } = req.query;\r\n  if (!table) {\r\n    return res.status(400).json({ error: \"El parÃ¡metro 'table' es requerido\" });\r\n  }\r\n\r\n  let query = '';\r\n  if (table === 'Cubatas') {\r\n    query = 'SELECT * FROM Complementos_Cubata'; // Ajusta esto segÃºn tu esquema de base de datos\r\n  } else if (table === 'Helados Personalizados') {\r\n    query = 'SELECT * FROM Complementos_Helado'; // Ajusta esto segÃºn tu esquema de base de datos\r\n  } else if (table === 'Cafes') {\r\n    query = `SELECT Nombre,Precio FROM Complementos_Cafe `;\r\n  } else if (table === 'Bolleria') {\r\n    query = `SELECT Nombre,Precio FROM Complementos_Bolleria `;\r\n  } else if (table === 'Ginebras') {\r\n    query = `SELECT * FROM Complementos_Gins `;\r\n  } else if (table === 'Infusiones') {\r\n    query = `SELECT * FROM Complementos_Infusiones `;\r\n  }\r\n  db.query(query, [table], (err, results) => {\r\n    if (err) {\r\n      res.status(500).json({ error: \"Error al ejecutar la consulta\" });\r\n      return;\r\n    }\r\n    res.json(results);\r\n  });\r\n});\r\n\r\napp.get(\"/api/productos/:tableName/:productName/ncomplementos\", (req, res) => {\r\n  const { tableName, productName } = req.params;\r\n\r\n  // Consulta SQL para obtener Ncomplementos de la tabla especificada\r\n  const query = `SELECT Ncomplementos FROM ?? WHERE Nombre = ?`;\r\n\r\n  // Ejecutar la consulta\r\n  db.query(query, [tableName, productName], (err, results) => {\r\n      if (err) {\r\n          console.error('Error al ejecutar la consulta:', err);\r\n          res.status(500).json({ error: \"Error al ejecutar la consulta\" });\r\n          return;\r\n      }\r\n      if (results.length === 0) {\r\n          res.status(404).json({ error: \"Producto no encontrado\" });\r\n          return;\r\n      }\r\n      res.json({ Ncomplementos: results[0].Ncomplementos });\r\n  });\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n// PÃ¡gina de administrador\r\n\r\n// Ruta para obtener los nombres de las tablas\r\napp.get('/api/tables', (req, res) => {\r\n  db.query('SHOW TABLES', (err, results) => {\r\n    if (err) {\r\n      res.status(500).json({ error: 'Error al obtener las tablas' });\r\n      return;\r\n    }\r\n    const tables = results.map(row => Object.values(row)[0]);\r\n    res.json(tables);\r\n  });\r\n});\r\n\r\n// Ruta para obtener datos de una tabla especÃ­fica\r\napp.get('/api/tables/:tableName', (req, res) => {\r\n  const tableName = req.params.tableName;\r\n  db.query(`SELECT * FROM ??`, [tableName], (err, results) => {\r\n    if (err) {\r\n      res.status(500).json({ error: 'Error al obtener los datos de la tabla' });\r\n      return;\r\n    }\r\n    res.json(results);\r\n  });\r\n});\r\n\r\n// Ruta para editar datos en una tabla especÃ­fica\r\napp.put('/api/tables/:tableName/:id', (req, res) => {\r\n  const tableName = req.params.tableName;\r\n  const id = req.params.id;\r\n  const updatedData = req.body;\r\n\r\n  db.query(`UPDATE ?? SET ? WHERE id = ?`, [tableName, updatedData, id], (err, result) => {\r\n    if (err) {\r\n      res.status(500).json({ error: 'Error al actualizar los datos' });\r\n      return;\r\n    }\r\n    res.json({ message: 'Datos actualizados correctamente' });\r\n  });\r\n});\r\n// Iniciar el servidor\r\napp.listen(port, () => {\r\n  console.log(`Servidor corriendo en http://localhost:${port}`);\r\n});\r\n"],"file":"server.dev.js"}