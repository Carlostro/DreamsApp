{"version":3,"sources":["server.js"],"names":["express","require","fs","path","mysql","app","bodyParser","port","cors","use","json","origin","createConnection","host","database","user","err","password","error","stack","console","log","get","req","res","table","params","results","status","query","db","_req$params","id","length","name","body","result","insertId","put","_req$params2","_req$params3","affectedRows","send","_req$params4","tableName","productName","Ncomplementos","post","data","date","Date","dateString","getTime","getTimezoneOffset","toISOString","split","concat","filePath","join","__dirname","filename","appendFile","dataWithSeparator","message","code","activeTables","includes","filter","localDate","row","tables","updatedData","listen"],"mappings":"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","file":"server.min.js","sourcesContent":["const express = require(\"express\");\r\nconst fs = require('fs');\r\nconst bodyParser = require('body-parser');\r\nconst path = require('path');\r\nconst mysql = require(\"mysql2\");\r\nconst app = express();\r\nconst cors = require(\"cors\");\r\nconst port = 3000;\r\n\r\n// Habilitar CORS\r\napp.use(\r\n  cors({\r\n     origin: ['http://localhost:8100',\"http://192.168.1.44:4200\"]\r\n  })\r\n);\r\napp.use(bodyParser.json());\r\napp.use(express.json()); // Permite parsear JSON en las solicitudes\r\n\r\n// Configuración de la base de datos\r\nconst db = mysql.createConnection({\r\n  host: \"localhost\",\r\n  user: \"root\",\r\n  password: \"root\",\r\n  database: \"DreamsApp\",\r\n});\r\n\r\n// Conectar a la base de datos\r\ndb.connect((err) => {\r\n  if (err) {\r\n    console.error(\"Error al conectar a la base de datos:\", err.stack);\r\n    return;\r\n  }\r\n  console.log(\"Conectado a la base de datos MySQL.\");\r\n});\r\n\r\n// Ruta para obtener todos los datos de una tabla específica\r\napp.get(\"/api/data/:table\", (req, res) => {\r\n  const { table } = req.params;\r\n  db.query(`SELECT * FROM ??`, [table], (err, results) => {\r\n    if (err) {\r\n      res.status(500).json({ error: \"Error al ejecutar la consulta\" });\r\n      return;\r\n    }\r\n    res.json(results);\r\n  });\r\n});\r\n\r\n// Ruta para obtener datos de la tabla promosheladeria donde activate es 1\r\napp.get(\"/api/promosheladeria/active\", (req,res) => {\r\n  db.query(`SELECT * FROM PromosHeladeria WHERE Activo = 1`, (err, results) => {\r\n    if (err) {\r\n      console.error('Error al ejecutar la consulta:', err);\r\n      res.status(500).json({ error: \"Error al ejecutar la consulta\" });\r\n      return;\r\n    }\r\n    res.json(results);\r\n  });\r\n});\r\n\r\n// Ruta para obtener un dato específico por ID de una tabla específica\r\napp.get(\"/api/data/:table/:id\", (req, res) => {\r\n  const { table, id } = req.params;\r\n  db.query(`SELECT * FROM ?? WHERE id = ?`, [table, id], (err, results) => {\r\n    if (err) {\r\n      res.status(500).json({ error: \"Error al ejecutar la consulta\" });\r\n      return;\r\n    }\r\n    if (results.length === 0) {\r\n      res.status(404).json({ error: \"Dato no encontrado\" });\r\n      return;\r\n    }\r\n    res.json(results[0]);\r\n  });\r\n});\r\n\r\n// Ruta para insertar datos en una tabla específica\r\napp.post(\"/api/data/:table\", (req, res) => {\r\n  const { table } = req.params;\r\n  const { name } = req.body;\r\n  if (!name) {\r\n    return res.status(400).json({ error: \"El campo name es requerido\" });\r\n  }\r\n\r\n  db.query(\r\n    `INSERT INTO ?? (nombre) VALUES (?)`,\r\n    [table, name],\r\n    (err, result) => {\r\n      if (err) {\r\n        res.status(500).json({ error: \"Error al insertar datos\" });\r\n        return;\r\n      }\r\n      res.status(201).json({ id: result.insertId, name });\r\n    }\r\n  );\r\n});\r\n\r\n// Ruta para actualizar datos en una tabla específica\r\napp.put(\"/api/data/:table/:id\", (req, res) => {\r\n  const { table, id } = req.params;\r\n  const { name } = req.body;\r\n  if (!name) {\r\n    return res.status(400).json({ error: \"El campo name es requerido\" });\r\n  }\r\n\r\n  db.query(\r\n    `UPDATE ?? SET nombre = ? WHERE id = ?`,\r\n    [table, name, id],\r\n    (err, result) => {\r\n      if (err) {\r\n        res.status(500).json({ error: \"Error al actualizar datos\" });\r\n        return;\r\n      }\r\n      if (result.affectedRows === 0) {\r\n        res.status(404).json({ error: \"Dato no encontrado\" });\r\n        return;\r\n      }\r\n      res.json({ id, name });\r\n    }\r\n  );\r\n});\r\n\r\n// Ruta para eliminar datos en una tabla específica\r\napp.delete(\"/api/data/:table/:id\", (req, res) => {\r\n  const { table, id } = req.params;\r\n  db.query(`DELETE FROM ?? WHERE id = ?`, [table, id], (err, result) => {\r\n    if (err) {\r\n      res.status(500).json({ error: \"Error al eliminar datos\" });\r\n      return;\r\n    }\r\n    if (result.affectedRows === 0) {\r\n      res.status(404).json({ error: \"Dato no encontrado\" });\r\n      return;\r\n    }\r\n    res.status(204).send();\r\n  });\r\n});\r\n\r\n// Ruta para obtener complementos de una tabla específica\r\napp.get(\"/api/complementos\", (req, res) => {\r\n  const { table } = req.query;\r\n  if (!table) {\r\n    return res.status(400).json({ error: \"El parámetro 'table' es requerido\" });\r\n  }\r\n\r\n  let query = '';\r\n  if (table === 'Cubatas') {\r\n    query = 'SELECT * FROM Complementos_Cubata'; // Ajusta esto según tu esquema de base de datos\r\n  } else if (table === 'Helados Personalizados') {\r\n    query = 'SELECT * FROM Complementos_Helado'; // Ajusta esto según tu esquema de base de datos\r\n  } else if (table === 'Cafes') {\r\n    query = `SELECT * FROM Complementos_Cafe `;\r\n  } else if (table === 'Bolleria') {\r\n    query = `SELECT * FROM Complementos_Bolleria `;\r\n  } else if (table === 'Ginebras') {\r\n    query = `SELECT * FROM Complementos_Gins `;\r\n  } else if (table === 'Infusiones') {\r\n    query = `SELECT * FROM Complementos_Infusiones `;\r\n  }  else if (table === 'Batidos Helados') {\r\n    query = `SELECT * FROM Complementos_Batidos `;\r\n  }\r\n  db.query(query, [table], (err, results) => {\r\n    if (err) {\r\n      res.status(500).json({ error: \"Error al ejecutar la consulta\" });\r\n      return;\r\n    }\r\n    res.json(results);\r\n  });\r\n});\r\n\r\napp.get(\"/api/productos/:tableName/:productName/ncomplementos\", (req, res) => {\r\n  const { tableName, productName } = req.params;\r\n\r\n  // Consulta SQL para obtener Ncomplementos de la tabla especificada\r\n  const query = `SELECT Ncomplementos FROM ?? WHERE Nombre = ?`;\r\n\r\n  // Ejecutar la consulta\r\n  db.query(query, [tableName, productName], (err, results) => {\r\n      if (err) {\r\n          console.error('Error al ejecutar la consulta:', err);\r\n          res.status(500).json({ error: \"Error al ejecutar la consulta\" });\r\n          return;\r\n      }\r\n      if (results.length === 0) {\r\n          res.status(404).json({ error: \"Producto no encontrado\" });\r\n          return;\r\n      }\r\n      res.json({ Ncomplementos: results[0].Ncomplementos });\r\n  });\r\n});\r\n\r\n// Ruta para insertar datos en una tabla específica\r\napp.post('/api/write-to-file', (req, res) => {\r\n  const { data } = req.body;\r\n  const date = new Date();\r\n  const localDate = new Date(date.getTime() - date.getTimezoneOffset() * 60000);\r\n  const dateString = localDate.toISOString().split('T')[0]; // Obtener la fecha en formato YYYY-MM-DD\r\n  const filename = `datos_${dateString}.txt`; // Nombre del archivo basado en la fecha\r\n  const filePath = path.join(__dirname, 'files', filename); // Guardar en la carpeta 'files'\r\n  const dataWithSeparator = `\\n--------------------\\n${data}`;\r\n\r\n  fs.appendFile(filePath, dataWithSeparator, (err) => {\r\n    if (err) {\r\n      console.error('Error al añadir datos al archivo:', err);\r\n      return res.status(500).json({ error: 'Error al añadir datos al archivo' });\r\n    }\r\n    //console.log('Datos añadidos al archivo:', filePath);\r\n    res.json({ message: 'Datos añadidos al archivo' });\r\n  });\r\n});\r\n\r\n//-------------------------------------------------------------------------------------------------\r\n//Control de mesas activas para evitar que se pueda abrir una mesa que ya esta abierta\r\nlet activeTables = [];\r\n\r\napp.get('/active-tables', (req, res) => {\r\n  res.json(activeTables);\r\n});\r\n\r\napp.post('/active-tables', (req, res) => {\r\n  const { code } = req.body;\r\n  if (!activeTables.includes(code)) {\r\n    activeTables.push(code);\r\n  }\r\n  res.json(activeTables);\r\n});\r\n\r\napp.delete('/active-tables/:code', (req, res) => {\r\n  const { code } = req.params;\r\n  activeTables = activeTables.filter(table => table !== code);\r\n  res.json(activeTables);\r\n});\r\n\r\n\r\n\r\n//-----------------------------------------------------------------------------------------------\r\n//                              Página de administrador\r\n//-----------------------------------------------------------------------------------------------\r\n\r\n// Ruta para obtener los nombres de las tablas\r\napp.get('/api/tables', (req, res) => {\r\n  db.query('SHOW TABLES', (err, results) => {\r\n    if (err) {\r\n      res.status(500).json({ error: 'Error al obtener las tablas' });\r\n      return;\r\n    }\r\n    const tables = results.map(row => Object.values(row)[0]);\r\n    res.json(tables);\r\n  });\r\n});\r\n\r\n// Ruta para obtener datos de una tabla específica\r\napp.get('/api/tables/:tableName', (req, res) => {\r\n  const tableName = req.params.tableName;\r\n  db.query(`SELECT * FROM ??`, [tableName], (err, results) => {\r\n    if (err) {\r\n      res.status(500).json({ error: 'Error al obtener los datos de la tabla' });\r\n      return;\r\n    }\r\n    res.json(results);\r\n  });\r\n});\r\n\r\n// Ruta para editar datos en una tabla específica\r\napp.put('/api/tables/:tableName/:id', (req, res) => {\r\n  const tableName = req.params.tableName;\r\n  const id = req.params.id;\r\n  const updatedData = req.body;\r\n\r\n  db.query(`UPDATE ?? SET ? WHERE id = ?`, [tableName, updatedData, id], (err, result) => {\r\n    if (err) {\r\n      res.status(500).json({ error: 'Error al actualizar los datos' });\r\n      return;\r\n    }\r\n    res.json({ message: 'Datos actualizados correctamente' });\r\n  });\r\n});\r\n// Iniciar el servidor\r\napp.listen(port, () => {\r\n  console.log(`Servidor corriendo Correctamente`);\r\n});\r\n"]}